define sibling(var node) {
	var parent = node.parent;
	if (parent == null) return null;

	if (node == parent.l) return parent.r;
	return parent.l;
}
define standing(var node) {
	var parent = node.parent;
	if (parent == null) return "neither";
	if (parent.balance == 0) return "neither";

	if (parent.balance > 0) {
		if (node == parent.l) return "favorite";
		else                  return "lesser";
	}

	if (node == parent.r) return "favorite";
	return "lesser";
}

define linear(var son, var father, var grand) {
	if (father == grand.l) {
		if (son == father.l) return true;
		else                 return false;
	}
	else {
		if (son == father.r) return true;
		else                 return false;
	}

}

class Node {
	var val = null;
	var parent = null;
	var l = null;
	var r = null;

	var height = 1;
	var balance = 0;


	define predecessor() {
		if (l == null) return null;

		var trailing = l;
		var curr = l.r;
		while (curr != null) {
			trailing = curr;
			curr = curr.r;
		}
		return trailing;
	}
	define successor() {
		if (r == null) return null;
		var trailing = r;
		var curr = r.l;
		while (curr != null) {
			trailing = curr;
			curr = curr.l;
		}
		return trailing;
	}

	define printVal() {
		print(val); //, "h:", height);
		if (balance > 0)      print("+");
		else if (balance < 0) print("-");
	}

	define displayHelper() {
		if (l != null) {
			l.displayHelper();
			print(" ");
		}
		if (parent == null) print("[");

		printVal();

		if (parent != null) {
			print("(");
			parent.printVal();
			print(")");
		}
		if (parent == null) print("]");
	
		if (r != null) {
			print(" ");
			r.displayHelper();
		}
	}

	define setBalance(){
		balance = 0;
		var childHeight = 0;
		if (l != null) {
			balance = balance + l.height;
			if (l.height > childHeight) childHeight = l.height;
		}
		if (r != null) {
			balance = balance - r.height;
			if (r.height > childHeight) childHeight = r.height;
		}
		height = childHeight + 1;
	}
	
	define favorite() {
		if      (balance == 0) return null;
		else if (balance > 0)  return l;
		else                   return r;
	}
}

class Tree {
	var root = null;

	define display() {
		if (root != null) root.displayHelper();
		println();
		return;
	}


	define insert(var newVal) {

		if (this.root == null) {
			root = Node();
			root.val = newVal;
			return this.root;
		}

		var prev = null;
		var node = this.root;

		while (node != null) {

			if (newVal <= node.val) {
				prev = node;
				node = node.l;
			}
			else {
				prev = node;
				node = node.r;
			}
		}

		var leaf = Node();
		leaf.val = newVal;
		leaf.parent = prev;

		if (newVal <= prev.val) prev.l = leaf;
		else                    prev.r = leaf;

		insertFixup(leaf);

		return leaf;
	}


	define insertFixup(var leaf) {
		var x = leaf;
		var fav;
		var p;
		var stding;

		while ( true ) {

			if (x == root) return;
			p = x.parent;

			stding = standing(x);

			if (stding == "lesser") {
				p.setBalance();
				return;
			}
			else if (stding == "neither") {
				p.setBalance();
				x = p;
			}
			else {
				fav = x.favorite();

				if ( (fav != null) & (! ( linear(fav, x, p) )  )) {
					//println("Doing a nonlinear rotation");
					rotate(fav); //Rotate to x
					rotate(fav); //Rotate to p
					x.setBalance();
					p.setBalance();
					fav.setBalance();
				}
				else {
					rotate(x);
					p.setBalance();
					x.setBalance();
				}
				return;
			}
		}
	}

	define rotate(var node) {
		if (node == node.parent.l) rotateRight(node);
		else                       rotateLeft(node);
	}
	define rotateRight(var node) {
		var origRoot = root;
		var orig = node;
		var origParent = node.parent;
		var origGrandparent = origParent.parent;
	
		if (origParent != origRoot) {
			if (origParent == origGrandparent.l) origGrandparent.l = node;
			else                                 origGrandparent.r = node;
		}
		orig.parent = origGrandparent;
		origParent.parent = orig;
	
		var origRight = orig.r;
		origParent.l = origRight;
		if (origRight != null) origRight.parent = origParent;
	
		orig.r = origParent;
	
		if (origParent == origRoot) {
			root = node;
			root.parent = null;
		}
	
	}
	define rotateLeft(var node) {
		var origRoot = root;
		var orig = node;
		var origParent = node.parent;
		var origGrandparent = origParent.parent;
	
		if (origParent != origRoot) {
			if (origParent == origGrandparent.l) origGrandparent.l = node;
			else                                 origGrandparent.r = node;
		}
		orig.parent = origGrandparent;
		origParent.parent = orig;
	
		var origLeft = orig.l;
		origParent.r = origLeft;
		if (origLeft != null) origLeft.parent = origParent;
	
		orig.l = origParent;
	
		if (origParent == origRoot) {
			root = node;
			root.parent = null;
		}
	
	}


}

define interpreter(var fp) {
	var tree = Tree();
	var display = tree.display;
	var insert = tree.insert;

	var command;
	var arg;

	while ( hasNext(fp) ) {
		command = atoi( next(fp) );

		if (command == 0) {
			display();
		}
		else if (command == 1) {
			arg = atoi( next(fp) );
			insert(arg);
		}

	}

}


define main(var filePath) { interpreter( open(filePath) ); }
