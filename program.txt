/* 
 * Ethan Mines
 * CS503 - Lusth
 */
var veryScaryGlobal = 7;

define helloFunction() {
	print("Hello, world!");
}

class Rectangle {

	var width;
	var height;

	define constructor(var w, var h) {
		width = w;
		height = h ;
	}

	define perimeter() {
		return (2 * width) + (2 * height);
	}

	//A block can be a single statement, for functions, loops, and conditional statements
	define area() return width * height;

	define debug() {
		if (veryScaryGlobal < 0) return; //Return statements without a value
		print(width);
		print(height);
	}

}

class Square extends Rectangle {

	define constructor(var sideLength) {
		super(sideLength, sideLength);
	}

}

main(args) {

	//LOCAL DEFINITIONS
	var x = 42;
	var y = "Minese is a rather conventional language";
	var z;
	var classroom = Rectangle(10, 4);

	//Define an anonymous function
	var isEven = (var rectangle) {
		if (rectangle.area() % 2 == 0) return true;
		else                           return false;
	}
	print(isEven(classroom))

	//Define a local function
	define pow(var base, var exp) {
		var result = 1;
		var i = 0;
		while (i < exp) {
			result = result * base;
			i = i + 1;
		}
		return result;
	}

	//Define a local class
	class Triangle {
		var a; var b; var c;
		define constructor(a, b, c) {
			this.a = a;
			this.b = b;
			this.c = c;
		}
	}	

	//CONDITIONALS
	if (x < 0)
		z = "Negative"; //A block can be a single statement
	else if (x == 0) {
		x = x + 1;
		z = "Zero";
	}
	else if (x == 42) {
		z = "The answer to life, the universe, and everything."
		return 0; //Return from anywhere
	}
	else z = "Positive";

	var doStuff = false;
	if (doStuff) {
		print("Boolean variables are convenient!");
	}


	//LOOPING
	var i = 1;
	while (i < x) {
		i = i * 2;
		print(i);
	}	

	//ARRAYS
	var primes = {2, 3, 5, 7, 11, 13, 17, 19, 23, 29};
	var i = -1;
	while (i < primes.length - 1) {
		print(primes[i+1]); //An array index can be an expression
		i = i + 1;
	}


	var arithmetic = -pow(x, 2) + (y = 3) + (3 - 6 + 5 % 2);
	3; //Any expresion followed by a semicolon is valid

	var linesOfCode = 118;
	var softwareIsWellWritten = (linesOfCode > 100) && !(linesofCode > 2000);

	return 0;
}
