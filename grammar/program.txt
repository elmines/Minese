var veryScaryGlobal = 7;

define helloFunction() {
	print("Hello, world!");
}

class Rectangle {

	var width;
	var height;

	//Var keyword not required for constructors
	define constructor(var width, var height) {
		this.width = width;
		this.height = height;
	}

	define perimeter() {
		return (2 * width) + (2 * height);
	}

	//A block can be a single statement, for functions and conditional statements
	define area() return this.width * this.height;

	define debug() {
		print(width);
		print(height);
	}

}

class Square extends Rectangle {

	define constructor(var sideLength) {
		super(sideLength, sideLength);

		this.width = sideLength;
		this.height = sideLength;
	}

}

main(args) {

	var x = 42;
	var y = "Minese is a rather conventional language";
	var z;

 	
	if ( x < 0 )
		z = "Negative"; //A block can be a single statement
	else if (x == 0) {
		x = x + 1;
		z = "Zero";
	}
	else if (x == 42) {
		z = "The answer to life, the universe, and everything."
		return 0;
	}
	else z = "Positive";


	var i = 1;
	while (i < x) {
		i = i * 2;
		print(i);
	}	

	var comparisions = {1 < 1, 1 <= 1, 1 != 1, 1 == 1, 1 >= 1, 1 > 1};
	var ops = {1 + 1, 1 - 1, 1 * 1, 1 / 1, 1 % 1};
	var i = -1;
	while (i < ops.length - 1) {
		print(ops[i+1]); //An array index can be an expression
		i = i + 1;
	}

	var classroom = Rectangle(10, 4);

	//Declare an anonymous function
	var isEven = (var rectangle) {
		if (rectangle.area() % 2 == 0) return true;
		else                           return false;
	}

	print(isEven(classroom))

	//Declare a locally scoped function
	var pow(var base, var exp) {
		var result = 1;
		var i = 0;
		while (i < exp) {
			result = result * base;
			i = i + 1;
		}
		return result;
	}

	var x = -pow(x, 2) + (y = 3) + (3 - 6 + 5 % 2);

	return 0;
}
